name: Build & Deploy

on:
  push:
    branches:
      - main
      - test
    tags:
      - v*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish-docker-image-to-ghcr:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: image=moby/buildkit:v0.20.2

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@4976231911ebf5f32aad765192d35f942aa48cb8
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ startsWith(github.ref, 'refs/tags/') && format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, github.ref_name) || '' }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ env.TIMESTAMP }}
            org.opencontainers.image.revision=${{ github.sha }}
          platforms: linux/amd64
          outputs: type=docker,rewrite-timestamp=true
        env:
          SOURCE_DATE_EPOCH: 0
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-to-phala-cloud:
    needs: publish-docker-image-to-ghcr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Phala Cloud (Staging)
        uses: Leechael/phala-deploy-action@v2
        with:
          phala-api-key: ${{ secrets.PHALA_CLOUD_API_KEY }}
          compose-file: "./docker-compose.yaml"
          vcpu: "2"
          memory: "4096"
          disk-size: "80"
          envs: |
            LITELLM_DATABASE_URL: ${{ secrets.LITELLM_DATABASE_URL }}
            LITELLM_MASTER_KEY: ${{ secrets.LITELLM_MASTER_KEY }}
            LITELLM_SALT_KEY: ${{ secrets.LITELLM_SALT_KEY }}
            NEAR_AI_CLOUD_DB_URL: ${{ secrets.NEAR_AI_CLOUD_DB_URL }}
            NEAR_AI_CLOUD_DB_DIRECT_URL: ${{ secrets.NEAR_AI_CLOUD_DB_DIRECT_URL }}
            SUPABASE_API_URL: ${{ secrets.SUPABASE_API_URL }}
            SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
            NEAR_AI_CLOUD_DOCKER_IMAGE_SHA: ${{ github.sha }}
            NEAR_AI_CLOUD_API_DOMAIN: ${{ secrets.NEAR_AI_CLOUD_API_DOMAIN }}
            CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
            CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
            DSTACK_GATEWAY_DOMAIN: dstack-prod${{ secrets.PHALA_CLOUD_NODE_ID }}.phala.network
          cvm-name: ${{ secrets.PHALA_CLOUD_CVM_NAME }}
          app-id: ${{ secrets.PHALA_CLOUD_APP_ID }}
          node-id: ${{ secrets.PHALA_CLOUD_NODE_ID }}
          base-image: ""
