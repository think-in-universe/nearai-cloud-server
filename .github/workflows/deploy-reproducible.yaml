name: Build & Deploy (Reproducible)

on:
  push:
    branches:
      - main
      - test
    tags:
      - v*
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Use specific Node.js version for reproducibility
  NODE_VERSION: "22.3.0"
  PNPM_VERSION: "10.10.0"

jobs:
  publish-docker-image-to-ghcr:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better reproducibility

      - name: Set up reproducible build environment
        run: |
          # Set timezone to UTC for consistent timestamps
          sudo timedatectl set-timezone UTC
          # Set locale for consistent sorting
          export LC_ALL=C.UTF-8
          echo "LC_ALL=C.UTF-8" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@edfb0fe6204400c56fbfd3feba3fe9ad1adfa345

      - name: Get Git commit information for reproducible builds
        id: git-info
        run: |
          echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "COMMIT_TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_OUTPUT
          echo "COMMIT_DATE=$(git log -1 --pretty=%cI)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (Reproducible)
        id: push
        uses: docker/build-push-action@4976231911ebf5f32aad765192d35f942aa48cb8
        with:
          context: .
          file: ./Dockerfile.reproducible
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.git-info.outputs.COMMIT_DATE }}
            org.opencontainers.image.title=NearAI Cloud Server
            org.opencontainers.image.description=Reproducible build of NearAI Cloud Server
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            PNPM_VERSION=${{ env.PNPM_VERSION }}
            BUILD_DATE=${{ steps.git-info.outputs.COMMIT_DATE }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
        env:
          SOURCE_DATE_EPOCH: ${{ steps.git-info.outputs.COMMIT_TIMESTAMP }}
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Verify image reproducibility
        run: |
          echo "Image digest: ${{ steps.push.outputs.digest }}"
          echo "Image ID: ${{ steps.push.outputs.imageid }}"
          echo "Metadata: ${{ steps.meta.outputs.json }}"

  deploy-to-phala-cloud:
    needs: publish-docker-image-to-ghcr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Phala Cloud (Staging)
        uses: Leechael/phala-deploy-action@v2
        with:
          phala-api-key: ${{ secrets.PHALA_CLOUD_API_KEY }}
          compose-file: "./docker-compose.yaml"
          vcpu: "2"
          memory: "4096"
          disk-size: "80"
          envs: |
            LITELLM_DATABASE_URL: ${{ secrets.LITELLM_DATABASE_URL }}
            LITELLM_MASTER_KEY: ${{ secrets.LITELLM_MASTER_KEY }}
            LITELLM_SALT_KEY: ${{ secrets.LITELLM_SALT_KEY }}
            NEAR_AI_CLOUD_DB_URL: ${{ secrets.NEAR_AI_CLOUD_DB_URL }}
            NEAR_AI_CLOUD_DB_DIRECT_URL: ${{ secrets.NEAR_AI_CLOUD_DB_DIRECT_URL }}
            SUPABASE_API_URL: ${{ secrets.SUPABASE_API_URL }}
            SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
            NEAR_AI_CLOUD_DOCKER_IMAGE_SHA: ${{ github.sha }}
            NEAR_AI_CLOUD_API_DOMAIN: ${{ secrets.NEAR_AI_CLOUD_API_DOMAIN }}
            CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
            CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
            DSTACK_GATEWAY_DOMAIN: dstack-prod${{ secrets.PHALA_CLOUD_NODE_ID }}.phala.network
          cvm-name: ${{ secrets.PHALA_CLOUD_CVM_NAME }}
          app-id: ${{ secrets.PHALA_CLOUD_APP_ID }}
          node-id: ${{ secrets.PHALA_CLOUD_NODE_ID }}
          base-image: ""
